from flask import Blueprint, render_template, request, redirect, url_for, flash, session as flask_session, current_app
from datetime import datetime
from forms import MyForm
from models import db, Product, ProductType, ProductTypeMap, ProductPortfolios, ProductPortfolioMap, ProductNotes, ProductReferences, ProductAlias, ProductMktLife, ProductPartners, Partner, ProductComponents, ProductLog
from sqlalchemy.exc import OperationalError, ProgrammingError
import permissions
import logging
import time
import os

# Configure logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

# Environment variables for retry logic
RETRY_ATTEMPTS = int(os.getenv('RETRY_ATTEMPTS', 5))
RETRY_WAIT_TIME = int(os.getenv('RETRY_WAIT_TIME', 2))
SERIALIZABLE_ERROR_CODE = 'XX000'

add_routes = Blueprint('add_routes', __name__)

def retry_db_operation(operation, attempts=RETRY_ATTEMPTS, wait_time=RETRY_WAIT_TIME):
    for attempt in range(attempts):
        try:
            return operation()
        except (OperationalError, ProgrammingError) as e:
            if isinstance(e, ProgrammingError):
                if hasattr(e.orig, 'pgcode') and e.orig.pgcode != SERIALIZABLE_ERROR_CODE:
                    raise
            logger.error(f"Attempt {attempt + 1} failed with error: {e}")
            time.sleep(wait_time * (2 ** attempt))  # Exponential backoff
    logger.error(f"All attempts to perform the operation failed after {attempts} attempts.")
    raise Exception("Database operation failed after multiple attempts.")

@add_routes.route('/opl/add-product', methods=['GET', 'POST'])
@permissions.opl_editor_permission.require()
def add_product():
    form = MyForm()
    success_message = None
    show_form = True

    # Initialize the variables here
    today = datetime.utcnow().strftime('%Y-%m-%d')
    formatted_created_date = None
    formatted_last_updated_date = None

    session = current_app.config['Session']()
    try:

        is_admin_only = request.form.get('is_admin_only') == 'on'

        # Populate product type choices
        form.product_type.choices = [(ptype.type_id, ptype.product_type) for ptype in retry_db_operation(lambda: session.query(ProductType).all())]

        # Populate product portfolio choices
        form.product_portfolio.choices = [(portfolio.category_id, portfolio.category_name) for portfolio in retry_db_operation(lambda: session.query(ProductPortfolios).all())]

        # Populate partner choices
        form.partner.choices = [(partner.partner_id, partner.partner_name) for partner in retry_db_operation(lambda: session.query(Partner).all())]

        # Populate component choices with alphabetical sorting by product_name
        form.product_id.choices = [('', 'Select')] + [
            (str(product.product_id), product.product_name) for product in retry_db_operation(lambda: session.query(Product).order_by(Product.product_name).all())
        ]

        if form.validate_on_submit():
            created_date = datetime.now()
            logger.debug("Form data received: %s", request.form)

            # Create a new product instance
            new_product = Product(
                product_name=form.product_name.data,
                product_description=form.product_description.data,
                upcoming_change=form.upcoming_change.data,
                deprecated=form.deprecated.data,
                product_status=form.product_status.data if form.product_status.data != 'Select' else '',
                product_status_detail='NULL' if form.product_status.data == 'Deprecated' else form.product_status_detail.data,
                last_updated=created_date,
                created=created_date,
                is_admin_only=is_admin_only,
            )

            # If product_status is Deprecated, set product_status_detail to 'NULL'
            if form.product_status.data == 'Deprecated':
                form.product_status_detail.data = 'NULL'

            retry_db_operation(lambda: session.add(new_product))
            retry_db_operation(lambda: session.commit())

            # Add product type mapping
            selected_product_types = form.product_type.data
            for product_type_id in selected_product_types:
                product_type_map = ProductTypeMap(product_id=new_product.product_id, type_id=product_type_id)
                retry_db_operation(lambda: session.add(product_type_map))

            # Add product portfolio mapping
            selected_portfolios = form.product_portfolio.data
            for portfolio_id in selected_portfolios:
                product_portfolio_map = ProductPortfolioMap(product_id=new_product.product_id, category_id=portfolio_id)
                retry_db_operation(lambda: session.add(product_portfolio_map))

            # Add Product Notes
            product_notes_data = form.product_notes.data
            if product_notes_data:
                product_notes = ProductNotes(product_id=new_product.product_id, product_note=product_notes_data)
                retry_db_operation(lambda: session.add(product_notes))

            # Add Product References
            product_references_data = []
            for i in range(len(request.form.getlist('product_link'))):
                product_link = request.form.getlist('product_link')[i]
                link_description = request.form.getlist('link_description')[i]
                if product_link and link_description:
                    product_references_data.append({
                        'product_link': product_link,
                        'link_description': link_description
                    })

            for reference_data in product_references_data:
                product_references = ProductReferences(
                    product_id=new_product.product_id,
                    product_link=reference_data['product_link'],
                    link_description=reference_data['link_description']
                )
                retry_db_operation(lambda: session.add(product_references))

            # Process the first set of Product Alias fields
            alias_name = request.form.get('alias_name')
            if alias_name:
                alias_type = request.form.get('alias_type')
                alias_approved = 'alias_approved' in request.form  # Directly check for 'alias_approved'
                previous_name = 'previous_name' in request.form  # Directly check for 'previous_name'
                tech_docs = 'tech_docs' in request.form  # Directly check for 'tech_docs'
                tech_docs_cli = 'tech_docs_cli' in request.form  # Directly check for 'tech_docs_cli'
                alias_notes = request.form.get('alias_notes')

                first_alias = ProductAlias(
                    product_id=new_product.product_id,
                    alias_name=alias_name,
                    alias_type=alias_type,
                    alias_approved=alias_approved,
                    previous_name=previous_name,
                    tech_docs=tech_docs,
                    tech_docs_cli=tech_docs_cli,
                    alias_notes=alias_notes
                )
                retry_db_operation(lambda: session.add(first_alias))

            # Process subsequent sets of Product Alias fields
            alias_index = 2
            while True:
                alias_name_key = f'alias_name_{alias_index}'
                alias_name = request.form.get(alias_name_key)

                if not alias_name:
                    break

                alias_type = request.form.get(f'alias_type_{alias_index}')
                alias_approved = f'alias_approved_{alias_index}' in request.form
                previous_name = f'previous_name_{alias_index}' in request.form
                tech_docs = f'tech_docs_{alias_index}' in request.form
                tech_docs_cli = f'tech_docs_cli_{alias_index}' in request.form
                alias_notes = request.form.get(f'alias_notes_{alias_index}')

                subsequent_alias = ProductAlias(
                    product_id=new_product.product_id,
                    alias_name=alias_name,
                    alias_type=alias_type,
                    alias_approved=alias_approved,
                    previous_name=previous_name,
                    tech_docs=tech_docs,
                    tech_docs_cli=tech_docs_cli,
                    alias_notes=alias_notes
                )
                retry_db_operation(lambda: session.add(subsequent_alias))
                alias_index += 1

            # Get the selected partner_id from the form
            selected_partner_ids = form.partner.data

            # Add product partners mapping
            for selected_partner_id in selected_partner_ids:
                product_partners = ProductPartners(
                    product_id=new_product.product_id,
                    partner_id=selected_partner_id
                )
                retry_db_operation(lambda: session.add(product_partners))

            # Add Product Components
            product_components_data = []
            product_ids = request.form.getlist('product_id')
            component_types = request.form.getlist('component_type')

            for i in range(len(product_ids)):
                product_id = product_ids[i]
                component_type = component_types[i]

                # Check if component_id is not 'Select'
                if product_id != 'Select':
                    product_components_data.append({
                        'product_id': product_id,
                        'component_type': component_type
                    })

            # Loop to save components
            for component_data in product_components_data:
                product_id = component_data['product_id']
                component_type = component_data['component_type']

                if product_id:
                    product_component = ProductComponents(
                        product_id=product_id,
                        component_id=new_product.product_id,
                        component_type=component_type
                    )
                    retry_db_operation(lambda: session.add(product_component))

            # Commit the changes to the database
            retry_db_operation(lambda: session.commit())

            # Add Product Mkt Life
            product_mkt_life = ProductMktLife(
                product_id=new_product.product_id,
                product_release=form.product_release.data,
                product_release_detail=form.product_release_detail.data,
                product_release_link=form.product_release_link.data,
                product_eol=form.product_eol.data,
                product_eol_detail=form.product_eol_detail.data,
                product_eol_link=form.product_eol_link.data
            )
            retry_db_operation(lambda: session.add(product_mkt_life))

            # Add product log
            edit_notes = request.form['edit_notes']
            edit_date_str = request.form.get('edit_date', '')
            username = flask_session.get('username')

            try:
                edit_date = datetime.strptime(edit_date_str, '%Y-%m-%d').date()
            except ValueError:
                edit_date = datetime.utcnow().date()  # Default to current date if parsing fails

            if edit_notes:
                product_log = ProductLog(
                    product_id=new_product.product_id,
                    edit_notes=edit_notes,
                    edit_date=edit_date,
                    username=username
                )
                retry_db_operation(lambda: session.add(product_log))

            # Commit changes outside the loop
            retry_db_operation(lambda: session.commit())

            # Format dates for display
            formatted_created_date = created_date.strftime('%Y-%m-%d')
            formatted_last_updated_date = created_date.strftime('%Y-%m-%d')

            # Set success message and hide the form
            view_link = url_for('view_routes.view_product_details', product_id=new_product.product_id)
            success_message = f'Successfully created the product: <a href="{view_link}">{form.product_name.data}</a>'
            show_form = False

    except Exception as e:
        logger.error(f"Error during form submission: {e}")
        session.rollback()
    finally:
        session.close()

    return render_template('opl/add.html', form=form, success_message=success_message,
                           show_form=show_form, formatted_created_date=formatted_created_date,
                           formatted_last_updated_date=formatted_last_updated_date, today=today, user=flask_session.get('username'))





{% extends 'base.html' %}

{% block heading %}
<h2 class="pf-v5-c-title pf-m-xl">Add product</h2>
{% endblock %}

{% block content %}
{% if show_form %}
<p class="pf-v5-c-alert pf-m-danger pf-m-inline" role="alert"><span class="pf-v5-c-alert__icon"><i
            class="fas fa-exclamation-circle" aria-hidden="true"></i></span> <strong>Fields marked with * are
        mandatory.</strong></p>

<form method="POST" action="{{ url_for('add_routes.add_product') }}" id="my-form">
    {{ form.hidden_tag() }}

    <fieldset class="pf-v5-c-form pf-m-horizontal">
        <legend class="pf-v5-c-title">Product information</legend>
        <div class="pf-v5-c-form__group">
            <div class="pf-v5-c-form__field">
                <label class="pf-v5-c-form__label" for="{{ form.product_name.id }}">
                    <span class="pf-v5-c-form__label-text">{{ form.product_name.label }}</span>
                </label>
                <div class="pf-v5-c-form__field-control">
                    {{ form.product_name(class="pf-v5-c-form-control", cols=40) }}
                </div>
            </div>

            <div class="pf-v5-c-form__field">
                <label class="pf-v5-c-form__label" for="{{ form.product_type.id }}">
                    <span class="pf-v5-c-form__label-text">{{ form.product_type.label }}</span>
                </label>
                <div class="pf-v5-c-form__field-control">
                    <select class="pf-v5-c-form-control" id="{{ form.product_type.id }}"
                        name="{{ form.product_type.name }}" multiple>
                        {% for value, label in form.product_type.choices %}
                        <option value="{{ value }}">{{ label }}</option>
                        {% endfor %}
                    </select>
                </div>
            </div>
        </div>

        <div class="pf-v5-c-form__group">
            <div class="pf-v5-c-form__field">
                <label class="pf-v5-c-form__label" for="{{ form.product_description.id }}">
                    <span class="pf-v5-c-form__label-text">{{ form.product_description.label }}</span>
                </label>
                <div class="pf-v5-c-form__field-control">
                    {{ form.product_description(class="pf-v5-c-form-control", cols=40) }}
                </div>
            </div>

            <div class="pf-v5-c-form__field">
                <label class="pf-v5-c-form__label" for="{{ form.product_portfolio.id }}">
                    <span class="pf-v5-c-form__label-text">{{ form.product_portfolio.label }}</span>
                </label>
                <div class="pf-v5-c-form__field-control">
                    <select class="pf-v5-c-form-control" id="{{ form.product_portfolio.id }}"
                        name="{{ form.product_portfolio.name }}" multiple>
                        {% for value, label in form.product_portfolio.choices %}
                        <option value="{{ value }}">{{ label }}</option>
                        {% endfor %}
                    </select>
                </div>
            </div>
        </div>

        <div class="pf-v5-c-form__group">
            <div class="pf-v5-c-form__field">
                <label class="pf-v5-c-form__label" for="{{ form.product_notes.id }}">
                    <span class="pf-v5-c-form__label-text">{{ form.product_notes.label }}</span>
                </label>
                <div class="pf-v5-c-form__field-control">
                    {{ form.product_notes(class="pf-v5-c-form-control", cols=40) }}
                </div>
            </div>
        </div>

        <div class="pf-v5-c-form__group">
            <div class="pf-v5-c-check">
                <input type="checkbox" class="pf-v5-c-check__input" id="{{ form.is_admin_only.id }}" name="is_admin_only">
                <label class="pf-v5-c-check__label" for="{{ form.is_admin_only.id }}">{{
                    form.is_admin_only.label }}</label>
            </div>
        </div>

        


    </fieldset>

    <fieldset class="pf-v5-c-form pf-m-horizontal">
        <legend class="pf-v5-c-title">Product reference information</legend>
        <div id="product-references">
            <div class="pf-v5-c-form__group product-reference-pair">
                <div class="pf-v5-c-form__field">
                    <label class="pf-v5-c-form__label" for="{{ form.product_link.id }}">
                        <span class="pf-v5-c-form__label-text">{{ form.product_link.label }}</span>
                    </label>
                    <div class="pf-v5-c-form__field-control">
                        {{ form.product_link(class="pf-v5-c-form-control", cols=40) }}
                    </div>
                </div>

                <div class="pf-v5-c-form__field">
                    <label class="pf-v5-c-form__label" for="{{ form.link_description.id }}">
                        <span class="pf-v5-c-form__label-text">{{ form.link_description.label }}</span>
                    </label>
                    <div class="pf-v5-c-form__field-control">
                        {{ form.link_description(class="pf-v5-c-form-control", cols=40) }}
                    </div>
                </div>

                <div class="pf-v5-c-form__field">
                    <button type="button" class="pf-v5-c-button pf-m-danger remove-reference"  style="margin-top: 45px;"> Delete</button>
                </div>
            </div>
        </div>
        <button type="button" class="pf-v5-c-button pf-m-primary add-reference">
            {% if reference_forms %}
            Add more product reference information
            {% else %}
            Add reference information
            {% endif %}
        </button>
    </fieldset>



    <fieldset class="pf-v5-c-form pf-m-horizontal">
        <legend class="pf-v5-c-title">Product status information</legend>
        <div class="pf-v5-c-form__group">
            <!-- Use grid layout to handle checkbox alignment -->
            <div class="pf-v5-l-grid pf-m-all-6-col-on-sm pf-m-all-12-col">
                <div class="pf-v5-c-check pf-v5-l-grid__item">
                    {{ form.deprecated() }}
                    <label class="pf-v5-c-check__label" for="{{ form.deprecated.id }}">
                        {{ form.deprecated.label }}
                    </label>
                </div>
                <div class="pf-v5-c-check pf-v5-l-grid__item">
                    {{ form.upcoming_change() }}
                    <label class="pf-v5-c-check__label" for="{{ form.upcoming_change.id }}">
                        {{ form.upcoming_change.label }}
                    </label>
                </div>
            </div>
        </div>
    
        <div class="pf-v5-c-form__group">
   
            <div class="pf-v5-l-flex pf-m-column pf-m-row-on-md pf-m-align-items-flex-start pf-m-gap">
                <div class="pf-v5-c-form__group-control pf-v5-l-flex__item">
                    <label class="pf-v5-c-form__label" for="{{ form.product_status.id }}">
                        <span class="pf-v5-c-form__label-text">{{ form.product_status.label }}</span>
                    </label>
                    {{ form.product_status(id="status-dropdown", class="pf-v5-c-form-control") }}
                </div>
                <div class="pf-v5-c-form__group-control pf-v5-l-flex__item">
                    <label class="pf-v5-c-form__label" for="{{ form.product_status_detail.id }}">
                        <span class="pf-v5-c-form__label-text">{{ form.product_status_detail.label }}</span>
                    </label>
                    {{ form.product_status_detail(id="status-details-dropdown", class="pf-v5-c-form-control") }}
                </div>
            </div>
        </div>
    </fieldset>

    <fieldset class="pf-v5-c-form pf-m-horizontal">
        <legend class="pf-v5-c-title">Product alias information</legend>
        <div id="product-aliases">
            <div class="product-alias-group pf-v5-c-form__group">

                <div class="pf-v5-l-grid pf-m-gutter">
                    <!-- Column 1 for Alias Name and Alias Notes, adjusts on small screens -->
                    <div class="pf-v5-l-grid__item pf-m-12-col pf-m-6-col-on-sm pf-m-4-col-on-md">
                        <div class="pf-v5-c-form__group">
                            <label class="pf-v5-c-form__label" for="{{ form.alias_name.id }}">
                                <span class="pf-v5-c-form__label-text">{{ form.alias_name.label }}</span>
                            </label>
                            {{ form.alias_name(id=form.alias_name.id, class="pf-v5-c-form-control", cols=30) }}
                        </div>
    
                        <div class="pf-v5-c-form__group">
                            <label class="pf-v5-c-form__label" for="{{ form.alias_notes.id }}">
                                <span class="pf-v5-c-form__label-text">{{ form.alias_notes.label }}</span>
                            </label>
                            {{ form.alias_notes(id=form.alias_notes.id, class="pf-v5-c-form-control", cols=30) }}
                        </div>
                    </div>

                    <div class="pf-v5-l-grid__item pf-m-12-col pf-m-6-col-on-sm pf-m-4-col-on-md">
                        <div class="pf-v5-c-form__group">
                            <label class="pf-v5-c-form__label" for="{{ form.alias_type.id }}">
                                <span class="pf-v5-c-form__label-text">{{ form.alias_type.label }}</span>
                            </label>
                            {{ form.alias_type(id="alias-type-dropdown", class="pf-v5-c-form-control alias-type-dropdown") }}
                        </div>
                    </div>

                    <div class="pf-v5-l-grid__item pf-m-12-col pf-m-6-col-on-sm pf-m-4-col-on-md">
                        <label class="pf-v5-c-form__label" for="{{ form.alias_type.id }}">
                            <span class="pf-v5-c-form__label-text">Is?</span>
                        </label>
                        <div class="pf-v5-c-form__group">
                            <div class="pf-v5-c-check">
                                <input type="checkbox" class="pf-v5-c-check__input" id="{{ form.alias_approved.id }}"
                                    name="alias_approved">
                                <label class="pf-v5-c-check__label" for="{{ form.alias_approved.id }}">{{
                                    form.alias_approved.label }}</label>
                            </div>
                            <div class="pf-v5-c-check">
                                <input type="checkbox" class="pf-v5-c-check__input" id="{{ form.previous_name.id }}"
                                    name="previous_name">
                                <label class="pf-v5-c-check__label" for="{{ form.previous_name.id }}">{{
                                    form.previous_name.label }}</label>
                            </div>
                            <div class="pf-v5-c-check">
                                <input type="checkbox" class="pf-v5-c-check__input" id="{{ form.tech_docs.id }}"
                                    name="tech_docs">
                                <label class="pf-v5-c-check__label" for="{{ form.tech_docs.id }}">{{ form.tech_docs.label
                                    }}</label>
                            </div>
                            <div class="pf-v5-c-check">
                                <input type="checkbox" class="pf-v5-c-check__input" id="{{ form.tech_docs_cli.id }}"
                                    name="tech_docs_cli">
                                <label class="pf-v5-c-check__label" for="{{ form.tech_docs_cli.id }}">{{
                                    form.tech_docs_cli.label }}</label>
                            </div>
                        </div>
                    </div>
                </div>
                <button type="button" class="pf-v5-c-button pf-m-danger remove-alias-group"
                    style="display: none;">Delete</button>
            </div>
        </div>
        <button type="button" class="pf-v5-c-button pf-m-primary add-alias-group">Add more
            aliases</button>
    </fieldset>

    <div class="pf-v5-l-grid pf-m-gutter">
        <fieldset class="pf-v5-c-form pf-m-horizontal pf-v5-l-grid__item pf-m-6-col">
            <legend class="pf-v5-c-title">Product release information</legend>
    
            <div class="pf-v5-c-form__group date">
                <label class="pf-v5-c-form__label" for="{{ form.product_release.id }}">
                    <span class="pf-v5-c-form__label-text">{{ form.product_release.label }}</span>
                </label>
                {{ form.product_release(id=form.product_release.id, class="pf-v5-c-form-control") }}
            </div>
    
            <div class="pf-v5-c-form__group">
                <label class="pf-v5-c-form__label" for="{{ form.product_release_detail.id }}">
                    <span class="pf-v5-c-form__label-text">{{ form.product_release_detail.label }}</span>
                </label>
                {{ form.product_release_detail(id=form.product_release_detail.id, class="pf-v5-c-form-control", cols=40) }}
            </div>
    
            <div class="pf-v5-c-form__group">
                <label class="pf-v5-c-form__label" for="{{ form.product_release_link.id }}">
                    <span class="pf-v5-c-form__label-text">{{ form.product_release_link.label }}</span>
                </label>
                {{ form.product_release_link(id=form.product_release_link.id, class="pf-v5-c-form-control", cols=40) }}
            </div>
        </fieldset>

        <fieldset class="pf-v5-c-form pf-m-horizontal pf-v5-l-grid__item pf-m-6-col">
            <legend class="pf-v5-c-title">Product end of life information</legend>
    
            <div class="pf-v5-c-form__group date">
                <label class="pf-v5-c-form__label" for="{{ form.product_eol.id }}">
                    <span class="pf-v5-c-form__label-text">{{ form.product_eol.label }}</span>
                </label>
                {{ form.product_eol(id=form.product_eol.id, class="pf-v5-c-form-control") }}
            </div>
    
            <div class="pf-v5-c-form__group">
                <label class="pf-v5-c-form__label" for="{{ form.product_eol_detail.id }}">
                    <span class="pf-v5-c-form__label-text">{{ form.product_eol_detail.label }}</span>
                </label>
                {{ form.product_eol_detail(id=form.product_eol_detail.id, class="pf-v5-c-form-control", cols=40) }}
            </div>
    
            <div class="pf-v5-c-form__group">
                <label class="pf-v5-c-form__label" for="{{ form.product_eol_link.id }}">
                    <span class="pf-v5-c-form__label-text">{{ form.product_eol_link.label }}</span>
                </label>
                {{ form.product_eol_link(id=form.product_eol_link.id, class="pf-v5-c-form-control", cols=40) }}
            </div>
        </fieldset>
    </div>

    <fieldset class="pf-v5-c-form pf-m-horizontal">
        <legend class="pf-v5-c-title">Product partners information</legend>
        <div class="pf-v5-c-form__group">
            <div class="pf-v5-c-form__group-control">
                <label class="pf-v5-c-form__label" for="{{ form.partner.id }}">
                    <span class="pf-v5-c-form__label-text">{{ form.partner.label }}</span>
                </label>
                <select id="{{ form.partner.id }}" name="{{ form.partner.name }}" class="pf-v5-c-form-control" multiple>
                    {% for value, label in form.partner.choices %}
                    <option value="{{ value }}">{{ label }}</option>
                    {% endfor %}
                </select>
            </div>
        </div>
    </fieldset>

    <fieldset class="pf-v5-c-form pf-m-horizontal">
        <legend class="pf-v5-c-title">Product parent information</legend>
        <div id="product-component-groups">
            <div class="product-component-group pf-v5-c-form__group">
                <div class="pf-v5-c-form__group-control">
                    <label class="pf-v5-c-form__label" for="{{ form.product_id.id }}">
                        <span class="pf-v5-c-form__label-text">{{ form.product_id.label }}</span>
                    </label>
                    <select id="{{ form.product_id.id }}" name="{{ form.product_id.name }}" class="pf-v5-c-form-control">
                        {% for value, label in form.product_id.choices %}
                        <option value="{{ value }}">{{ label }}</option>
                        {% endfor %}
                    </select>
                </div>
    
                <div class="pf-v5-c-form__group-control">
                    <label class="pf-v5-c-form__label" for="{{ form.component_type.id }}">
                        <span class="pf-v5-c-form__label-text">{{ form.component_type.label }}</span>
                    </label>
                    <select id="{{ form.component_type.id }}" name="{{ form.component_type.name }}"
                        class="pf-v5-c-form-control">
                        {% for value, label in form.component_type.choices %}
                        <option value="{{ value }}">{{ label }}</option>
                        {% endfor %}
                    </select>
                </div>
                <div class="pf-v5-c-form__field">
                    <button type="button" class="pf-v5-c-button pf-m-danger remove-component-group" style="display: none; margin-top: 27px; ">Delete</button>
                </div>
            </div>
        </div>
        <button type="button" class="pf-v5-c-button pf-m-primary add-component-group">Add more parents</button>
    </fieldset>

    <fieldset class="pf-v5-c-form pf-m-horizontal">
        <legend class="pf-v5-c-title">Notes and changelog</legend>
            <div class="pf-v5-c-form__group">
                <div class="pf-v5-c-form__group-control">
                    <label class="pf-v5-c-form__label" for="edit_date">
                        <span class="pf-v5-c-form__label-text">Date</span>
                    </label>
                    <input type="date" id="edit_date" name="edit_date" class="pf-v5-c-form-control date" value="{{ today }}">
                </div>
    
                <div class="pf-v5-c-form__group-control">
                    <label class="pf-v5-c-form__label" for="edit_notes">
                        <span class="pf-v5-c-form__label-text">{{ form.edit_notes.label }}</span>
                    </label>
                    <textarea id="edit_notes" name="edit_notes" class="pf-v5-c-form-control" cols="40"></textarea>
                </div>
            </div>
    </fieldset>

    {{ form.submit(class="pf-v5-c-button pf-m-primary pf-m-display-lg") }}
</form>

<script src="https://code.jquery.com/jquery-3.6.4.min.js"></script>
<script src="{{ url_for('static', filename='scripts/status.js') }}"></script>
<script src="{{ url_for('static', filename='scripts/preferences.js') }}"></script>
<script src="{{ url_for('static', filename='scripts/alias.js') }}"></script>
<script src="{{ url_for('static', filename='scripts/component.js') }}"></script>
<script src="{{ url_for('static', filename='scripts/product_type.js') }}"></script>

{% endif %}

{% if success_message %}
<br>
<div class="pf-v5-c-alert pf-m-success" role="alert">
    <div class="pf-v5-c-alert__icon">
        <i class="fas fa-check-circle" aria-hidden="true"></i>
    </div>
    <h4 class="pf-v5-c-alert__title">{{ success_message|safe }}</h4>
</div>
<br>
<a href="{{ url_for('add_routes.add_product') }}" class="pf-v5-c-button pf-m-primary">Add more products</a>
{% endif %}
{% endblock %}
